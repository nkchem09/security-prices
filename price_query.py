# -*- coding: utf-8 -*-
"""
Created on Wed Jul 10 21:22:49 2019

@author: ABMRazin
"""

import pandas as pd
import numpy as np
import pymysql
from sqlalchemy import create_engine
import matplotlib.pyplot as plt

conn = pymysql.connect(host = [host_name], user = [user_name], passwd = [password])
cur = conn.cursor()

cur.execute("use [database_name]")

engine = create_engine("mysql+pymysql://[user_name]: [password]@[hostname]: [port]/[database_name]")

def fetch_price(ticker, start_date, end_date):
    cur.execute("select symbol.id, symbol.ticker, symbol.sector, daily_price.date, daily_price.close, daily_price.adjClose from symbol join daily_price on symbol.id = daily_price.symbol_id where symbol.ticker = (%s) and daily_price.date >= (%s) and daily_price.date <= (%s)", (ticker, start_date, end_date))
    data = cur.fetchall()
    
    id = []
    ticker = []
    sector = []
    date = []
    close = []
    adjClose = []
    
    df = pd.DataFrame()
    for i in data:
        id.append(i[0])
        ticker.append(i[1])
        sector.append(i[2])
        date.append(i[3])
        close.append(i[4])
        adjClose.append(i[5])
    
    #df[["id", "ticker", "sector", "date", "close", "adj_close"]] = [id, ticker, sector, date, close, adjClose]
    
    df["id"] = id    
    df["ticker"] = ticker
    df["sector"] = sector    
    df["date"] = date
    df["close"] = close
    df["adj_close"] = adjClose
    
    return df

#df = fetch_price("KMB", "2017-01-01", "2019-07-10")
#p = p.set_index("date")
#p = p.reset_index()


class df_price(object):
    
    """
    df_price class takes a price dataframe generated by the fetch_price function from the internal database
    as data and runs various calculations and plotting
    """
    
    def __init__(self, df):
        self.df = df
    
    """
    moving_average only takes a list with max 3 integer elements or single integer as argument
    """
    
    def plot(self, start, end, moving_average = None):
        df = self.df.set_index("date")
        df = df.loc[start:end]
        df = df.reset_index()
        
        fig, ax = plt.subplots(figsize = (12, 6))
        ax.plot(df["date"], df["adj_close"], color = "darkslategrey", linewidth = 1.5, linestyle = "-", label = "Adjusted Close")
        ax.legend(loc = "upper left", fontsize = 11)
        ax.set_title(df["ticker"][0], loc = "right", fontsize = 14)
        
        ax.spines["top"].set_visible(False)
        ax.spines["bottom"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.spines["left"].set_visible(False)
        
        date = df["date"].tolist()
        price = df["adj_close"].tolist()
        min_price = min(price)
        
        ax.fill_between(date, min_price, price, facecolor = "lightslategray")
        
#        if moving_average == None:
#            return ax
        
#        elif moving_average != None:
        if type(moving_average) is list:
            
            if len(moving_average) == 2:
                
                sma1 = moving_average[0]
                df[str(sma1)+"day_sma"] = df["adj_close"].rolling(window = sma1, min_periods = sma1).mean()
                ax.plot(df["date"], df[str(sma1)+"day_sma"], color = "black", linewidth = 1.5, linestyle = "--", label = str(sma1)+"-day"+" SMA")
                ax.legend(loc = "upper left", fontsize = 11)
                
                sma2 = moving_average[1]
                df[str(sma2)+"day_sma"] = df["adj_close"].rolling(window = sma2, min_periods = sma2).mean()
                ax.plot(df["date"], df[str(sma2)+"day_sma"], color = "r", linewidth = 1.5, linestyle = "--", label = str(sma2)+"-day"+" SMA")
                ax.legend(loc = "upper left", fontsize = 11)
                
                return ax
            
            elif len(moving_average) == 3:
                
                sma1 = moving_average[0]
                df[str(sma1)+"day_sma"] = df["adj_close"].rolling(window = sma1, min_periods = sma1).mean()
                ax.plot(df["date"], df[str(sma1)+"day_sma"], color = "black", linewidth = 1.5, linestyle = "--", label = str(sma1)+"-day"+" SMA")
                ax.legend(loc = "upper left", fontsize = 11)
                
                sma2 = moving_average[1]
                df[str(sma2)+"day_sma"] = df["adj_close"].rolling(window = sma2, min_periods = sma2).mean()
                ax.plot(df["date"], df[str(sma2)+"day_sma"], color = "r", linewidth = 1.5, linestyle = "--", label = str(sma2)+"-day"+" SMA")
                ax.legend(loc = "upper left", fontsize = 11)
    
                sma3 = moving_average[2]
                df[str(sma3)+"day_sma"] = df["adj_close"].rolling(window = sma3, min_periods = sma3).mean()                
                ax.plot(df["date"], df[str(sma3)+"day_sma"], color = "b", linewidth = 1.5, linestyle = "--", label = str(sma3)+"-day"+" SMA")
                ax.legend(loc = "upper left", fontsize = 11)
                
                return ax

        elif type(moving_average) is int:
            sma = moving_average
            df[str(sma)+"day_sma"] = df["adj_close"].rolling(window = sma, min_periods = sma).mean()
            ax.plot(df["date"], df[str(sma)+"day_sma"], color = "black", linewidth = 1.5, linestyle = "--", label = str(sma)+"-day"+" SMA")
            ax.legend(loc = "upper left", fontsize = 11)
            
            return ax
        
        else:
            return ax
    
    
df = fetch_price(ticker = "A", start_date = "2016-01-01", end_date = "2019-07-10")
df

x = df_price(df)
plot = x.plot(start = "2016-01-01", end = "2019-06-28", moving_average = [9, 20, 50])                


#x = [1, 2, 3, 4, 5]
#y1 = [3, 4, 5, 6, 7]
#y2 = [5, 6, 7, 8, 9]
#
#fig, ax = plt.subplots(figsize = (6, 6))
#ax.plot(x, y1, "r--", x, y2, "k--")
#ax.legend(loc = "upper left", fontsize = 11)
    



    
x = [1, 2, 3, 5]
y = [3, 7, 9, 10]
min_y = min(y)
#print (min_y)

fig, ax = plt.subplots(figsize = (6,6))    
ax.plot(x, y, color = "lightslategrey", linewidth = 1.3, linestyle = "-")
    
ax.fill_between(x, min_y, y)



#ticker = "MMM"
#start_date = "2018-01-01"
#end_date = "2019-01-01"
#cur.execute("select symbol.id, symbol.ticker, symbol.sector, daily_price.date, daily_price.close, daily_price.adjClose from symbol join daily_price on symbol.id = daily_price.symbol_id where symbol.ticker = (%s) and daily_price.date >= (%s) and daily_price.date <= (%s)", (ticker, start_date, end_date))
#data = cur.fetchall()    
#
#id = []
#ticker = []
#sector = []
#date = []
#close = []
#adjClose = []
#
#df = pd.DataFrame()
#for i in data:
#    id.append(i[0])
#    ticker.append(i[1])
#    sector.append(i[2])
#    date.append(i[3])
#    close.append(i[4])
#    adjClose.append(i[5])
#
##df[["id", "ticker", "sector", "date", "close", "adj_close"]] = [id, ticker, sector, date, close, adjClose]
#
#df["id"] = id    
#df["ticker"] = ticker
#df["sector"] = sector    
#df["date"] = date
#df["close"] = close
#df["adj_close"] = adjClose



#p["9day_sma"] = p["adj_close"].rolling(window = 9, min_periods = 9).mean()
#p["20day_sma"] = p["adj_close"].rolling(window = 20, min_periods = 20).mean()
#p["50day_sma"] = p["adj_close"].rolling(window = 50, min_periods = 50).mean()
#
#fig, ax = plt.subplots(figsize = (12, 6))
#ax.plot(p["date"], p["adj_close"], color = "darkslategrey", linewidth = 1.3, linestyle = "-", label = "KMB")
#
#ax.legend(loc = "upper left", fontsize = 11)
#ax.set_ylabel("Price")
#ax.set_xlabel("Date")
#
#date_lst = p["date"].tolist()
#price_lst = p["adj_close"].tolist()
#min_price = min(price_lst)
#
#ax.fill_between(date_lst, min_price, price_lst, facecolor = "lightslategray")
#
#ax.plot(p["date"], p["9day_sma"], color = "black", linewidth = 1.5, linestyle = "--")
#ax.plot(p["date"], p["20day_sma"], color = "r", linewidth = 1.5, linestyle = "--")
#ax.plot(p["date"], p["50day_sma"], color = "b", linewidth = 1.5, linestyle = "--")
#
#ax.spines["top"].set_visible(False)
#ax.spines["bottom"].set_visible(False)
#ax.spines["left"].set_visible(False)
#ax.spines["right"].set_visible(False)
#
#ax.tick_params(axis = "both", which = "both", length = 4)








